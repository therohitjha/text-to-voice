{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","input","setInput","voices","setVoices","speech","SpeechSynthesisUtterance","JSON","parse","localStorage","getItem","pitch","setPitch","rate","setRate","volume","setVolume","name","lang","setLang","select","setSelect","selection","setSelection","startSpeak","text","temp","find","e","voice","speechSynthesis","speak","useEffect","speaking","paused","cancel","addEventListener","this","getVoices","className","onChange","event","getLang","target","value","setItem","stringify","length","defaultValue","map","item","index","type","placeholder","onClick","pause","resume","clear","htmlFor","id","max","step","min","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d58a3922.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [input, setInput] = useState(\"\");\n  const [voices, setVoices] = useState([]);\n  const speech = new SpeechSynthesisUtterance();\n  const [pitch, setPitch] = useState(() =>\n    JSON.parse(localStorage.getItem(\"pitch\"))\n      ? JSON.parse(localStorage.getItem(\"pitch\"))\n      : 1\n  );\n  const [rate, setRate] = useState(() =>\n    JSON.parse(localStorage.getItem(\"rate\"))\n      ? JSON.parse(localStorage.getItem(\"rate\"))\n      : 1\n  );\n  const [volume, setVolume] = useState(() =>\n    JSON.parse(localStorage.getItem(\"volume\"))\n      ? JSON.parse(localStorage.getItem(\"volume\"))\n      : 1\n  );\n  const [lang, setLang] = useState(() =>\n    JSON.parse(localStorage.getItem(\"lang\"))\n      ? JSON.parse(localStorage.getItem(\"lang\"))\n      : { name: \"\", lang: \"\" }\n  );\n  const [select, setSelect] = useState(lang.name && lang.lang);\n  const [selection, setSelection] = useState(\"\");\n\n  useEffect(() => {\n    (speechSynthesis.speaking || speechSynthesis.paused) &&\n      speechSynthesis.cancel();\n    speechSynthesis.addEventListener(\"voiceschanged\", function () {\n      setVoices(this.getVoices());\n    });\n  }, [select]);\n\n  function startSpeak() {\n    speech.text = input;\n    const temp = voices.find(\n      (e) => e.name === lang.name && e.lang === lang.lang\n    );\n    speech.rate = rate;\n    speech.pitch = pitch;\n    speech.volume = volume;\n    speech.voice = temp;\n    speechSynthesis.speak(speech);\n  }\n\n  function handleLang(event) {\n    const getLang = voices.find((e) => e.name === event.target.value);\n    localStorage.setItem(\n      \"lang\",\n      JSON.stringify({ name: getLang.name, lang: getLang.lang })\n    );\n    setLang({ name: getLang.name, lang: getLang.lang });\n    setSelection(getLang.name);\n  }\n\n  function handlePitch(event) {\n    speechSynthesis.speaking && speechSynthesis.cancel();\n    localStorage.setItem(\"pitch\", JSON.stringify(event.target.value));\n    setPitch(event.target.value);\n    startSpeak();\n  }\n\n  function handleRate(event) {\n    speechSynthesis.speaking && speechSynthesis.cancel();\n    localStorage.setItem(\"rate\", JSON.stringify(event.target.value));\n    setRate(event.target.value);\n    startSpeak();\n  }\n  function handleVolume(event) {\n    speechSynthesis.speaking && speechSynthesis.cancel();\n    localStorage.setItem(\"volume\", JSON.stringify(event.target.value));\n    setVolume(event.target.value);\n    startSpeak();\n  }\n\n  function reset() {\n    setSelect(false);\n    localStorage.clear(\"lang\");\n    setLang({ name: \"\", lang: \"\" });\n    setSelection(\"\");\n    speechSynthesis.cancel();\n  }\n\n  return (\n    <div className=\"App\">\n      <select onChange={handleLang} value={selection}>\n        {voices.length ? (\n          select ? (\n            <option defaultValue={lang.name}>{lang.name}</option>\n          ) : (\n            <>\n              <option defaultValue={\"\"}>Default Language</option>\n              {voices.map((item, index) => (\n                <option key={item.name + index} defaultValue={item.name}>\n                  {item.name}\n                </option>\n              ))}\n            </>\n          )\n        ) : (\n          <option value=\"\">Language Not Available!</option>\n        )}\n      </select>\n      <input\n        type=\"text\"\n        value={input}\n        onChange={(e) => setInput(e.target.value)}\n        placeholder=\"Enter Input\"\n      />\n      <button onClick={startSpeak}>Speak!</button>\n      <button onClick={() => speechSynthesis.pause()}>Pause!</button>\n      <button onClick={() => speechSynthesis.resume()}>Resume!</button>\n      <button onClick={() => speechSynthesis.cancel()}>Stop!</button>\n      <button onClick={reset}>Reset Language</button>\n      <label htmlFor=\"pitch\">Pitch</label>\n      <input\n        id={\"pitch\"}\n        type=\"range\"\n        value={pitch}\n        onChange={handlePitch}\n        max={\"3\"}\n        step={\"0.1\"}\n      />\n      <label htmlFor=\"rate\">Rate</label>\n      <input\n        id={\"rate\"}\n        type=\"range\"\n        value={rate}\n        onChange={handleRate}\n        max={\"2\"}\n        step={\"0.1\"}\n      />\n      <label htmlFor=\"volume\">Volume</label>\n      <input\n        id={\"volume\"}\n        type=\"range\"\n        value={volume}\n        onChange={handleVolume}\n        max={\"1\"}\n        min={\"0\"}\n        step={\"0.1\"}\n      />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}